name: Create release

on:
  push:
    branches:
      - 'pipelines/**'
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: labd/mach-composer/mach

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: Set up Go modules cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go${{ matrix.go-version }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go${{ matrix.go-version }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-go${{ matrix.go-version }}-build-
            ${{ runner.os }}-go${{ matrix.go-version }}-

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Run tests
        run: |
          make lint test
          git checkout -- go.mod go.sum

      - name: Release
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      - uses: actions/upload-artifact@v3
        with:
          name: mach-composer
          path: dist/*


  docker:
    needs: [goreleaser]
    name: Build and push docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=mach
          VERSION=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed -r 's#^v##g')
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
          fi
          fi
          CACHE_FROM_TAG="${VERSION}"
          TAGS="${VERSION}"
          if [[ $VERSION =~ ^(v)?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${MINOR},${MAJOR},latest"
          CACHE_FROM_TAG="latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=cache-from-tag::${CACHE_FROM_TAG}
          echo $VERSION
      - name: Login to docker.pkg.github.com
        run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} docker.pkg.github.com
      - name: Pull cache from docker.pkg.github.com
        run: docker pull docker.pkg.github.com/labd/mach-composer/mach:${{ steps.prep.outputs.cache-from-tag }} || true
      - name: Build and push
        uses: docker/build-push-action@v1
        with:
          push: true
          cache_froms: ghcr.io/labd/mach-composer/mach:${{ steps.prep.outputs.cache-from-tag }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: labd/mach-composer/mach
          tags: ${{ steps.prep.outputs.tags }}


  docker-tf0:
    needs: [goreleaser]
    name: Build and push docker image (terraform 0.14)
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=mach
          VERSION=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed -r 's#^v##g')
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          fi
          echo ::set-output name=version::${VERSION}
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-args: |
            "TERRAFORM_VERSION=0.14.5"
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.prep.outputs.version }}-tf0
